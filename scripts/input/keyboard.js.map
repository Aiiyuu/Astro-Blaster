{"version":3,"sources":["input/keyboard.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAUH,2CAA2C;AAC3C,MAAM,QAAQ,GAAa,EAAE,CAAC;AAE9B,oDAAoD;AACpD,MAAM,eAAe,GAAkB,EAAE,CAAC;AAE1C;;;GAGG;AACH,MAAM,UAAU,oBAAoB;IAChC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAgB,EAAQ,EAAE;QAC1D,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAEjC,sDAAsD;QACtD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACjB,eAAe,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAChC,CAAC;QAED,iCAAiC;QACjC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAgB,EAAQ,EAAE;QACxD,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAEjC,wCAAwC;QACxC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACtB,eAAe,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACjC,CAAC,CAAC,CAAC;AACP,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,YAAY,CAAC,GAAW;IACpC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;AACzC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAAC,GAAW;IACpC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IAEnC,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC5B,eAAe,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,CAAC,2BAA2B;QAC9D,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC","file":"keyboard.js","sourcesContent":["/**\n * keyboard.ts\n * -----------------------------\n * This module handles keyboard input for the game.\n * It tracks both the continuous pressed state of keys\n * and whether a key was just clicked (pressed once).\n */\n\ntype KeyState = {\n    [key: string]: boolean; // Tracks keys currently held down\n};\n\ntype KeyClickState = {\n    [key: string]: boolean; // Tracks keys that were just pressed this frame\n};\n\n// Stores the current pressed state of keys\nconst keyState: KeyState = {};\n\n// Stores the clicked (edge-triggered) state of keys\nconst keyClickedState: KeyClickState = {};\n\n/**\n * Initializes keyboard controls by setting up event listeners\n * for keydown and keyup events. These update the key state objects.\n */\nexport function initKeyboardControls(): void {\n    window.addEventListener(\"keydown\", (e: KeyboardEvent): void => {\n        const key = e.code.toLowerCase();\n\n        // If key wasn't already held, mark it as just clicked\n        if (!keyState[key]) {\n            keyClickedState[key] = true;\n        }\n\n        // Mark the key as currently held\n        keyState[key] = true;\n    });\n\n    window.addEventListener(\"keyup\", (e: KeyboardEvent): void => {\n        const key = e.code.toLowerCase();\n\n        // Reset both pressed and clicked states\n        keyState[key] = false;\n        keyClickedState[key] = false;\n    });\n}\n\n/**\n * Returns true if the specified key is currently pressed.\n * Use this for holding actions like continuous movement.\n *\n * @param key - The key to check (use 'KeyW', 'ArrowLeft', etc.)\n */\nexport function isKeyPressed(key: string): boolean {\n    return !!keyState[key.toLowerCase()];\n}\n\n/**\n * Returns true if the specified key was just clicked (pressed this frame).\n * This only returns true once per key press and is reset immediately after.\n * Use this for single actions like jumping or firing.\n *\n * @param key - The key to check (use 'KeyW', 'ArrowLeft', etc.)\n */\nexport function isKeyClicked(key: string): boolean {\n    const lowerKey = key.toLowerCase();\n\n    if (keyClickedState[lowerKey]) {\n        keyClickedState[lowerKey] = false; // Clear after reading once\n        return true;\n    }\n\n    return false;\n}\n"]}