{"version":3,"sources":["entities/player.ts"],"names":[],"mappings":"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","file":"player.js","sourcesContent":["/**\n * player.ts\n *\n * Defines the Player class representing the spaceship controlled by the player.\n * Handles player properties such as position, movement, shooting, and collision detection.\n */\n\nimport config from '../config.js';\n\n\nclass Player {\n    // The interface provided by the browser representing the 2D rendering context\n    private ctx: CanvasRenderingContext2D;\n\n    private projectileDamage: number = config.player.projectile.damage;\n\n    private position: { x: number, y: number }; // The initial position of the spaceship (x, y)\n    public velocity: { x: number, y: number }; // The initial velocity of the spaceship (x, y)\n    public acceleration: { x: number; y: number }; // Player's current acceleration in x and y directions\n    public maxSpeed: number;\n\n    private rotation: number = 0; // The spaceship's rotation angle in radians (0 means facing right)\n    public rotationalVelocity: number = 0;  // To track the current rotation speed\n    public rotationalAcceleration: number = 0;  // To apply gradual rotation change\n\n    private spriteImage: HTMLImageElement = new Image();\n    private defaultImage: HTMLImageElement = new Image();\n    private isImageLoaded: boolean = false;\n\n    private spriteFrames: HTMLImageElement[] = []; // Array to hold the sprite frames\n    private frameIndex: number = 0;\n    private frameDelay: number = 5; // Delay between frames\n    private frameCounter: number = 0;\n\n    private explosionSpriteFrames: HTMLImageElement[] = [];\n    private explosionFrameIndex: number = 0;\n    private explosionFrameDelay: number = 6;\n    private explosionFrameCounter: number = 0;\n    private isDefeated: boolean = false; // Flag to check if the player is defeated\n    private readyToBeRemoved: boolean = false; // Flag to check if the explosion animation is done\n    private delayBeforeRemoving: number = (config.meteorite.explosion_sprites.length - 1) * 20;\n\n    // Flying sound\n    private flyingSound: HTMLAudioElement;\n\n    constructor({ctx, position, velocity}: {\n        ctx: CanvasRenderingContext2D,\n        position: { x: number, y: number };\n        velocity: { x: number, y: number }\n    }) {\n        this.ctx = ctx;\n        this.position = position;\n        this.velocity = velocity;\n\n        // Initialize acceleration with default values\n        this.acceleration = { x: 0, y: 0 };\n\n        // Set max speed for the player, fallback to 5 if not defined in config\n        this.maxSpeed = config.player.maxSpeed || 5;\n\n        // Load sprite frames from config\n        for (let i: number = 0; i < config.player.sprites.length; i++) {\n            const frame = new Image();\n            frame.src = config.player.sprites[i]; // Load image from config\n            frame.onload = (): void => {\n                if (i === 0) this.spriteImage = frame; // Set initial image\n                this.isImageLoaded = true; // Only mark loaded when at least one frame is loaded\n            };\n            this.spriteFrames.push(frame);\n        }\n\n        // Load default image from config (idle state)\n        this.defaultImage.src = config.player.default_sprite;\n        this.defaultImage.onload = (): void => {\n            this.isImageLoaded = true;\n        };\n\n        // Load explosion sprite frames\n        this.explosionSpriteFrames = config.meteorite.explosion_sprites.map((spritePath: string): HTMLImageElement => {\n            const img = new Image();\n            img.src = spritePath;\n            return img;\n        });\n\n\n        // Initialize sounds\n        this.flyingSound = new Audio(config.game.sounds.flying_sound);\n        this.flyingSound.loop = true;\n        this.flyingSound.volume = 0.5;\n    }\n\n    /**\n     *  Draws the player's spaceship on the canvas.\n     *  This method handles rendering the player at the current position.\n     */\n    private draw(): void {\n        if (!this.isImageLoaded) return; // Ensure the image is loaded before drawing\n\n        // Dynamically calculate scaled dimensions based on image size\n        const scaledWidth: number = this.spriteImage.width * config.player.scale;\n        const scaledHeight: number = this.spriteImage.height * config.player.scale;\n\n        this.ctx.save();\n        // Draw the sprite at the current position\n        this.ctx.translate(this.position.x, this.position.y);\n        this.ctx.rotate(this.rotation);\n        this.ctx.translate(-this.position.x, -this.position.y);\n\n        // Draw image in the canvas\n        this.ctx.drawImage(\n            this.spriteImage,\n            this.position.x - scaledWidth / 2,\n            this.position.y - scaledHeight / 2,\n            scaledWidth,\n            scaledHeight\n        );\n\n        this.ctx.restore();\n    }\n\n    /**\n     * Draws the current explosion frame at the specified position.\n     * Stops once all frames are drawn.\n     */\n    private drawExplosion(): void {\n        // Stop if we've reached the end of the explosion animation\n        if (this.explosionFrameIndex >= this.explosionSpriteFrames.length) return;\n\n        const ctx: CanvasRenderingContext2D = this.ctx;\n        const explosionImg: HTMLImageElement = this.explosionSpriteFrames[this.explosionFrameIndex];\n\n        const width: number = explosionImg.width * config.player.scale * 2;\n        const height: number = explosionImg.height * config.player.scale * 2;\n\n        ctx.save();\n        ctx.translate(this.position.x, this.position.y);\n        ctx.drawImage(explosionImg, -width / 2, -height / 2, width, height);\n        ctx.restore();\n    }\n\n    /**\n     * Update the state of the player object\n     */\n    public update(): void {\n        if (this.isDefeated) {\n            this.updateExplosion();\n            return;\n        }\n\n        this.updateSprite(); // Update sprite based on movement\n        this.draw(); // Rerender the object\n        this.updatePosition(); // Update object position to imitate movement\n        this.updateRotation(); // Update object rotation value to imitate rotation movement\n    }\n\n    /**\n     * Updates the explosion animation by incrementing the frame index.\n     * Resets the frame counter and triggers removal when the last frame is reached.\n     */\n    private updateExplosion(): void {\n        this.explosionFrameCounter++;\n\n        // Proceed to the next frame if enough time has passed\n        if (this.explosionFrameCounter >= this.explosionFrameDelay) {\n            this.explosionFrameCounter = 0;\n            this.explosionFrameIndex++;\n\n            // If the last frame is reached, mark for removal after delay\n            if (this.explosionFrameIndex >= this.explosionSpriteFrames.length) {\n                this.explosionFrameIndex = this.explosionSpriteFrames.length - 1; // Stay on last frame\n                setTimeout((): boolean => this.readyToBeRemoved = true, this.delayBeforeRemoving);\n            }\n        }\n\n        this.drawExplosion();  // Draw the current explosion frame\n    }\n\n    /**\n     * Updates the player's position on the canvas.\n     * This method handles moving the player based on the velocity.\n     */\n    public updatePosition(): void {\n        // Update position by adding velocity\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n\n        // Clamp x between margin (left edge) and (canvasWidth - margin) (right edge)\n        this.position.x = Math.min(\n            Math.max(this.position.x, config.game.margin.x),\n            config.game.canvasWidth - config.game.margin.x\n        );\n\n        // Clamp y between margin (top edge) and (canvasHeight - margin) (bottom edge)\n        this.position.y = Math.min(\n            Math.max(this.position.y, config.game.margin.y),\n            config.game.canvasHeight - config.game.margin.y\n        );\n    }\n\n    /**\n     * Updates the player's rotation based on input and rotational physics.\n     * Applies acceleration when 'D' or 'A' is pressed, and friction when no keys are pressed.\n     * Ensures the rotational velocity doesn't exceed the maximum limit.\n     */\n    private updateRotation(): void {\n        // Handle rotation acceleration\n        this.rotation += this.rotationalVelocity;\n    }\n\n    /**\n     * Updates the player's sprite based on movement, acceleration, and rotation\n     */\n    private updateSprite(): void {\n        // Skip if no animation frames\n        if (this.spriteFrames.length === 0) return;\n\n        // Check if the player is moving\n        const isMoving: boolean = Math.abs(this.velocity.x) >= 0.3 ||\n            Math.abs(this.velocity.y) >= 0.3 ||\n            Math.abs(this.rotationalVelocity) > 0.011;\n\n        if (isMoving) {\n            this.frameCounter++;\n\n            // Advance to next frame if delay reached\n            if (this.frameCounter >= this.frameDelay) {\n                this.frameCounter = 0;\n                this.frameIndex = (this.frameIndex + 1) % this.spriteFrames.length;\n                this.spriteImage = this.spriteFrames[this.frameIndex];\n            }\n\n            // Play the flying sound\n            this.playFlyingSound();\n        } else {\n            // Show idle image from config\n            this.spriteImage = this.defaultImage;\n\n            // Stop the flying sound\n            this.stopFlyingSound();\n        }\n    }\n\n    // Method to play the flying sound\n    private playFlyingSound(): void {\n        this.flyingSound.play().catch((error: any): void => {\n            console.error('Failed to play flying sound:', error);\n        });\n    }\n\n    // Method to stop the flying sound\n    public stopFlyingSound(): void {\n        if (this.flyingSound.paused) return;\n\n        this.flyingSound.pause();  // Pauses the music\n        this.flyingSound.currentTime = 0;  // Resets the music to the start\n    }\n\n    // Returns player's position\n    public getPosition(): { x: number; y: number } {\n        return { ...this.position };\n    }\n\n    // Calculate the radius based on the image size and scale factor\n    public getRadius(): number {\n        // Calculate the scaled width and height of the player sprite\n        const scaledWidth: number = this.spriteImage.width * config.player.scale;\n        const scaledHeight: number = this.spriteImage.height * config.player.scale;\n\n        // Return the radius as half of the width or height (assuming the player is roughly circular)\n        return Math.min(scaledWidth, scaledHeight) / 2;\n    }\n\n    // Returns player's rotation state\n    public getRotation(): number {\n        return this.rotation;\n    }\n\n    // Returns player's projectile damage\n    public getProjectileDamage(): number {\n        return this.projectileDamage;\n    }\n\n    // Returns the readyToBeRemoved variable\n    public getReadyToBeRemoved(): boolean {\n        return this.readyToBeRemoved;\n    }\n\n    /**\n     * Sets the defeated state of the object.\n     */\n    public setIsDefeated(isDefeated: boolean): void {\n        this.isDefeated = isDefeated;\n    }\n}\n\nexport default Player;\n"]}