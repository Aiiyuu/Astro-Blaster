{"version":3,"sources":["entities/projectile.ts"],"names":[],"mappings":"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","file":"projectile.js","sourcesContent":["/**\n * projectile.ts\n *\n * Defines the Projectile class representing bullet shots in the game.\n * Manages projectile behavior including position, movement,and interactions with other game entities.\n */\nimport config from \"../config.js\";\n\n\nclass Projectile {\n    // The interface provided by the browser representing the 2D rendering context\n    private ctx: CanvasRenderingContext2D;\n\n    private position: { x: number; y: number };\n    private velocity: { x: number; y: number };\n\n    // Web Audio API setup\n    private audioContext: AudioContext;\n    private shootSoundBuffer: AudioBuffer | null = null;\n    private lastShootTime: number = 0;\n    private shootCooldown: number = 150; // Cooldown time in ms\n    private shootSoundIsPlayed: boolean = false;\n\n    constructor({ctx, position, velocity}: {\n        ctx: CanvasRenderingContext2D,\n        position: { x: number; y: number };\n        velocity: { x: number; y: number };\n    }) {\n        this.ctx = ctx;\n        this.position = position;\n        this.velocity = velocity;\n\n        // Initialize the Web Audio context\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n\n        // Load the shoot sound into the AudioContext\n        this.loadShootSound();\n    }\n\n    /**\n     * Draw a projectile on the canvas.\n     * this method handles rendering the projectile at the current position.\n     */\n    private draw(): void {\n        const { ctx, position, velocity } = this;\n\n        ctx.save();\n\n        ctx.strokeStyle = 'orange'; // Simple hot bullet color\n        ctx.lineWidth = 3; // Thin stick width\n\n        ctx.beginPath();\n\n        const length = 10; // length of the stick\n        const angle: number = Math.atan2(velocity.y, velocity.x);\n\n        const startX: number = position.x - Math.cos(angle) * length / 2;\n        const startY: number = position.y - Math.sin(angle) * length / 2;\n        const endX: number = position.x + Math.cos(angle) * length / 2;\n        const endY: number = position.y + Math.sin(angle) * length / 2;\n\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n\n        ctx.stroke();\n\n        ctx.restore();\n    }\n\n    /**\n     * Update the state of the projectile object\n     */\n    public update(): void {\n        this.draw() // Rerender the projectile\n\n        // Update the projectile position\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n\n        // Make sure the shoot sound is not played\n        if (this.shootSoundIsPlayed) return;\n\n        const currentTime:number = Date.now();\n        if (currentTime - this.lastShootTime >= this.shootCooldown) {\n            this.playShootSound();\n            this.shootSoundIsPlayed = true;\n            this.lastShootTime = currentTime; // Update last shoot time\n        }\n    }\n\n    /**\n     * Asynchronously loads and decodes the shooting sound into an AudioBuffer.\n     * The sound is fetched from the specified URL, converted to an ArrayBuffer,\n     * and then decoded using the Web Audio API for playback.\n     *\n     * @returns {Promise<void>} Resolves once the sound is loaded and ready to use.\n     */\n    private async loadShootSound(): Promise<void> {\n        // Fetch the shoot sound file and decode it into an audio buffer\n        try {\n            const response: Response = await fetch(config.game.sounds.shoot_sound);\n            const arrayBuffer = await response.arrayBuffer();\n            this.shootSoundBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n        } catch (error) {\n            console.error(\"Error loading shoot sound:\", error);\n        }\n    }\n\n    // Method to play the shoot sound\n    private playShootSound(): void {\n        console.log(true)\n        if (this.shootSoundBuffer && this.audioContext.state === 'running') {\n            // Create a new source node each time a sound is played\n            const soundSource: AudioBufferSourceNode = this.audioContext.createBufferSource();\n            soundSource.buffer = this.shootSoundBuffer;\n\n            // Connect the source to the destination (the speakers)\n            soundSource.connect(this.audioContext.destination);\n\n            // Start playing the sound\n            soundSource.start();\n        }\n    }\n\n    // Returns projectile's position\n    public getPosition(): { x: number; y: number } {\n        return { ...this.position };\n    }\n}\n\n\nexport default Projectile;"]}