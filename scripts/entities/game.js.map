{"version":3,"sources":["entities/game.ts"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["/**\n * game.ts\n *\n * Core game logic and state management for the starship vs asteroids game.\n * Handles game objects, updating their states, collision detection, and drawing.\n */\n\nimport config from '../config.js';\n\n// Define a type for sound names based on the config\ntype SoundName = keyof typeof config.game.sounds;\n\nclass Game {\n    private ctx: CanvasRenderingContext2D;\n    private canvas: HTMLCanvasElement;\n    private backgroundImage: HTMLImageElement;\n    private backgroundLoaded: boolean = false;\n    private scale: number = 0.3;\n\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n\n    // Max parallax movement allowed\n    private maxOffsetX: number = 0;\n    private maxOffsetY: number = 0;\n\n    // New score property\n    private score: number = 0;\n\n    // Player's health points\n    private healthPoints: number = config.player.health_points;\n    private isDefeated: boolean = false;\n\n    // Game musics and sounds\n    private backgroundMusic: HTMLAudioElement;\n    private gameOverSound: HTMLAudioElement;\n    private gameOverSoundIsPlayed: boolean = false;\n\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n\n        this.backgroundImage = new Image();\n        this.backgroundImage.src = '/assets/images/background.jpg';\n\n        this.backgroundImage.onload = (): void => {\n            this.backgroundLoaded = true;\n\n            const bgWidth: number = this.backgroundImage.width * this.scale;\n            const bgHeight: number = this.backgroundImage.height * this.scale;\n\n            // Calculate maximum offset to ensure the background always fills the canvas\n            this.maxOffsetX = Math.max(0, (bgWidth - this.canvas.width) / 2);\n            this.maxOffsetY = Math.max(0, (bgHeight - this.canvas.height) / 2);\n        };\n\n        this.backgroundImage.onerror = (): void => {\n            console.error('Failed to load background image.');\n        };\n\n        // Initialize sounds\n        this.backgroundMusic = new Audio(config.game.sounds.background_music);\n        this.gameOverSound = new Audio(config.game.sounds.game_over_sound);\n        this.backgroundMusic.loop = true;\n        this.backgroundMusic.volume = 0.5;\n    }\n\n    /**\n     * Updates the game state and adjusts the background's offset based on player velocity.\n     * This creates the effect of a subtle parallax as the player moves around the screen.\n     *\n     * @param playerVelocity - The velocity of the player character (x, y) affecting the background.\n     */\n    public update(playerVelocity: { x: number, y: number }): void {\n        // Apply a subtle parallax movement (e.g. 15% of player's velocity)\n        this.offsetX -= playerVelocity.x * 0.15;\n        this.offsetY -= playerVelocity.y * 0.15;\n\n        // Clamp offsets so background doesnâ€™t move out of visible bounds\n        this.offsetX = Math.max(-this.maxOffsetX, Math.min(this.offsetX, this.maxOffsetX));\n        this.offsetY = Math.max(-this.maxOffsetY, Math.min(this.offsetY, this.maxOffsetY));\n\n        // Call the draw method to re-render the screen with the updated background\n        this.draw();\n    }\n\n    /**\n     * Draws the background image onto the canvas.\n     * The background is drawn at the center of the screen with slight offset based on camera movement.\n     */\n    private draw(): void {\n        // Clear the screen to prepare for the next frame\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        if (this.backgroundLoaded) {\n            // Calculate the scaled width and height of the background image\n            const bgWidth: number = this.backgroundImage.width * this.scale;\n            const bgHeight: number = this.backgroundImage.height * this.scale;\n\n            // Calculate position to draw background, centered with a slight offset based on camera movement\n            const drawX: number = (this.canvas.width - bgWidth) / 2 + this.offsetX;\n            const drawY: number = (this.canvas.height - bgHeight) / 2 + this.offsetY;\n\n            // Draw the background image onto the canvas at the calculated position\n            this.ctx.drawImage(\n                this.backgroundImage,\n                0, 0,\n                this.backgroundImage.width, this.backgroundImage.height,\n                drawX, drawY,\n                bgWidth, bgHeight\n            );\n        } else {\n            // If the background isn't loaded, fill the screen with a black color as a fallback\n            this.ctx.fillStyle = 'black';\n            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n    }\n\n    /**\n     * Draws the score text at the top-right corner\n     */\n    public drawScore(): void {\n        // Draw the score at the top-right corner\n        this.ctx.font = `${config.game.score_text_size}px ${config.game.score_text_style}`;\n        this.ctx.fillStyle = 'white';\n        this.ctx.textAlign = 'right';\n        this.ctx.textBaseline = 'top';\n\n        const padding = 20; // Padding from the edge\n        this.ctx.fillText(`Score: ${this.score}`, this.canvas.width - padding, padding);\n    }\n\n    /**\n     * Draws the \"Game Over\" text at the center\n     */\n    public drawGameOver(): void {\n        // Set up font and style for \"Game Over\" text\n        this.ctx.font = `${config.game.game_over_text_size}px ${config.game.game_over_text_style}`;\n        this.ctx.fillStyle = 'white';\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n\n        // Draw the \"Game Over\" text in the center of the canvas\n        this.ctx.fillText(\"Game Over\", this.canvas.width / 2, this.canvas.height / 2);\n\n        // Stop the background music if it's playing\n        if (!this.backgroundMusic.paused) {\n            this.stopBackgroundMusic();\n        }\n\n        // Play the game over sound only if it's not already playing\n        if (this.gameOverSound.paused && !this.gameOverSoundIsPlayed) {\n            this.playGameOverSound();\n            this.gameOverSoundIsPlayed = true;\n        }\n    }\n\n    /**\n     * Draws the player's health points at the top-left corner\n     */\n    public drawHealthBar(): void {\n        const barWidth = 240;      // Total width of the health bar\n        const barHeight = 20;      // Height of the health bar\n        const paddingX = 20; // Left padding\n        const paddingY = 30; // Top padding (twice as large)\n\n        const healthPercentage: number = this.healthPoints / config.player.health_points;\n\n        // Background bar\n        this.ctx.fillStyle = '#DC2525';\n        this.ctx.fillRect(paddingX, paddingY, barWidth, barHeight);\n\n        // Health foreground\n        this.ctx.fillStyle = '#347433';\n        this.ctx.fillRect(paddingX, paddingY, barWidth * healthPercentage, barHeight);\n\n        // Border (optional)\n        this.ctx.strokeStyle = 'white';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(paddingX, paddingY, barWidth, barHeight);\n    }\n\n    /**\n     * Apply damage to the player.\n     * @param damage - The amount of damage to apply to the player.\n     */\n    public applyDamage(damage: number): void {\n        this.healthPoints -= damage;\n\n        // Ensure health doesn't go negative\n        if (this.healthPoints <= 0) {\n            this.isDefeated = true;\n            this.healthPoints = 0;\n        }\n    }\n\n    // Method to play the background music\n    public playBackgroundMusic(): void {\n        this.backgroundMusic.play().catch((error: any): void => {\n            console.error('Failed to play background music:', error);\n        });\n    }\n\n    // Method to stop the background music\n    private stopBackgroundMusic(): void {\n        this.backgroundMusic.pause();  // Pauses the music\n        this.backgroundMusic.currentTime = 0;  // Resets the music to the start\n    }\n\n    // Method to play the \"Game Over\" sound\n    private playGameOverSound(): void {\n        this.gameOverSound.play().catch((error: any): void => {\n            console.error('Failed to play Game Over sound:', error);\n        });\n    }\n\n    // Returns the isDefeated variable\n    public getIsDefeated(): boolean {\n        return this.isDefeated;\n    }\n\n    // Setter method to update the score\n    public setScore(newScore: number): void {\n        this.score = newScore;\n    }\n\n    // Getter method to access the score\n    public getScore(): number {\n        return this.score;\n    }\n}\n\nexport default Game;\n"]}