{"version":3,"sources":["entities/meteorite.ts"],"names":[],"mappings":"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","file":"meteorite.js","sourcesContent":["/**\n * meteorite.ts\n *\n * Defines the Meteorite class representing falling space rocks in the game.\n * Handles meteorite behavior including spawning, movement, and interactions\n * with the player and environment.\n */\n\nimport config from '../config.js';\n\nclass Meteorite {\n    // The interface provided by the browser representing the 2D rendering context\n    private ctx: CanvasRenderingContext2D;\n\n    private position: { x: number; y: number };\n    private target: { x: number, y: number };\n    private velocity: { x: number; y: number };\n\n    private health: number = config.meteorite.health_points; // Max health point from config\n\n    private rotation: number = 0; // The meteorite's rotation angle in radians (0 means facing right)\n\n    // Meteorite sprite\n    private meteoriteSpriteImage: HTMLImageElement = new Image();\n    private scale: number = 1;\n    private speed: number;\n\n    // Flame sprites\n    private flameSpriteFrames: HTMLImageElement[] = [];\n    private flameFrameIndex: number = 0;\n    private flameFrameDelay: number = 5;\n    private flameFrameCounter: number = 0;\n\n    // Explosion sprites\n    private explosionSpriteFrames: HTMLImageElement[] = [];\n    private explosionFrameIndex: number = 0;\n    private explosionFrameDelay: number = 6;\n    private explosionFrameCounter: number = 0;\n    private isDestroyed: boolean = false; // Flag to check if the meteorite is destroyed\n\n    // Indicates whether the object can be removed after the explosion animation.\n    private readyToBeRemoved: boolean = false;\n    private delayBeforeRemoving: number = (config.meteorite.explosion_sprites.length - 1) * 20;\n\n    // Explosion sound\n    private explosionSound: HTMLAudioElement;\n    private explosionSoundIsPlayed: boolean = false;\n\n\n    constructor({ctx, position, velocity, target}: {\n        ctx: CanvasRenderingContext2D,\n        position: { x: number; y: number };\n        velocity?: { x: number; y: number };\n        target: { x: number; y: number };\n    }) {\n        this.ctx = ctx;\n        this.position = position;\n        this.target = target;\n\n        // Random scale\n        this.scale = Math.random() * (config.meteorite.max_scale - config.meteorite.min_scale) + config.meteorite.min_scale;\n\n        // Random speed and angle\n        this.speed = Math.random() * (config.meteorite.max_speed - config.meteorite.min_speed) + config.meteorite.min_speed;\n        const angle: number = Math.random() * Math.PI + Math.PI / 4; // Between 45° and 225° downward-ish\n\n        this.velocity = velocity || {\n            x: Math.cos(angle) * this.speed,\n            y: Math.sin(angle) * this.speed\n        };\n\n        // Random meteorite sprite\n        const meteoriteSpriteIndex: number = Math.floor(Math.random() * config.meteorite.sprites.length);\n        this.meteoriteSpriteImage.src = config.meteorite.sprites[meteoriteSpriteIndex];\n\n        // Load flame sprite frames\n        this.flameSpriteFrames = config.meteorite.flame_sprites.map((spritePath: string): HTMLImageElement => {\n            const img = new Image();\n            img.src = spritePath;\n            return img;\n        });\n\n        // Load explosion sprite frames\n        this.explosionSpriteFrames = config.meteorite.explosion_sprites.map((spritePath: string): HTMLImageElement => {\n            const img = new Image();\n            img.src = spritePath;\n            return img;\n        });\n\n        // Initialize sounds\n        this.explosionSound = new Audio(config.game.sounds.explosion_sound);\n    }\n\n    /**\n     * Calculate the angle between the meteorite and its target for rotation.\n     */\n    private calculateRotation(): void {\n        const dx: number = this.target.x - this.position.x;\n        const dy: number = this.target.y - this.position.y;\n        this.rotation = Math.atan2(dy, dx); // Calculate angle to the target\n    }\n\n    /**\n     * Draw a meteorite and flame on the canvas.\n     * this method handles rendering the meteorite and flame at the current position.\n     */\n    private drawMeteorite(): void {\n        const ctx: CanvasRenderingContext2D = this.ctx;\n\n        // Calculate rotation angle based on velocity vector (pointing direction)\n        this.rotation = Math.atan2(this.velocity.y, this.velocity.x);\n\n        ctx.save();\n\n        // Translate to meteorite position\n        ctx.translate(this.position.x, this.position.y);\n\n        // Rotate to face movement direction\n        ctx.rotate(this.rotation);\n\n        // Draw flame behind meteorite\n        const meteoriteImg: HTMLImageElement = this.meteoriteSpriteImage;\n        const width: number = meteoriteImg.width * this.scale;\n        const height: number = meteoriteImg.height * this.scale;\n        const flameImg: HTMLImageElement = this.flameSpriteFrames[this.flameFrameIndex];\n\n        if (flameImg.complete) {\n            const flameWidth: number = flameImg.width * this.scale;\n            const flameHeight: number = flameImg.height * this.scale;\n\n            // Offset from meteorite center in opposite direction of velocity\n            const flameOffset: number = Math.max(width, height) / 2;\n\n            ctx.save();\n            // Rotate flame -90 degrees\n            ctx.rotate(-Math.PI / 2);\n\n            ctx.drawImage(\n                flameImg,\n                -flameWidth * 1.5 / 2,\n                -flameHeight * 1.5 / 2 - flameOffset,\n                flameWidth * 1.5,\n                flameHeight * 1.5\n            );\n            ctx.restore();\n        }\n\n        // Draw meteorite sprite centered\n        ctx.drawImage(meteoriteImg, -width / 2, -height / 2, width, height);\n\n        ctx.restore();\n    }\n\n    /**\n     * Draw an explosion animation frame on the canvas.\n     * This method handles rendering the current explosion frame at the specified position with scaling applied.\n     */\n    private drawExplosion(): void {\n        // Stop if we've reached the end of the explosion animation\n        if (this.explosionFrameIndex >= this.explosionSpriteFrames.length) return;\n\n        const ctx: CanvasRenderingContext2D = this.ctx;\n        const explosionImg: HTMLImageElement = this.explosionSpriteFrames[this.explosionFrameIndex];\n\n        // Calculate the width and height of the explosion frame with scaling\n        const width: number = explosionImg.width * this.scale * 2;\n        const height: number = explosionImg.height * this.scale * 2;\n\n        // Save the current canvas state before modifying it\n        ctx.save();\n\n        // Move the canvas origin to the explosion's position\n        ctx.translate(this.position.x, this.position.y);\n\n        // Draw the explosion frame, centered at the current position\n        ctx.drawImage(explosionImg, -width / 2, -height / 2, width, height);\n\n        // Restore the canvas state to avoid affecting other operations\n        ctx.restore();\n\n        // Play the explosion sound\n        if (!this.explosionSoundIsPlayed) {\n            this.playExplosionSound();\n        }\n    }\n\n    /**\n     * Draw the health bar above the meteorite.\n     */\n    private drawHealthBar(): void {\n        const ctx: CanvasRenderingContext2D = this.ctx;\n\n        // Parameters for the health bar\n        const barWidth: number = this.meteoriteSpriteImage.width * this.scale;\n        const barHeight = 7; // Height of the health bar\n        const healthPercentage: number = this.health / config.meteorite.health_points; // Calculate the health percentage\n\n        // Translate to meteorite position (without rotation)\n        ctx.save();\n        ctx.translate(this.position.x, this.position.y);\n\n        // Draw background of health bar (light gray for example)\n        ctx.fillStyle = '#DC2525'; // Background color of the health bar\n        ctx.fillRect(-barWidth / 2, this.meteoriteSpriteImage.height * this.scale / 2 + 10, barWidth, barHeight);\n\n        // Draw the green health bar\n        ctx.fillStyle = '#347433'; // Green for health\n        ctx.fillRect(-barWidth / 2, this.meteoriteSpriteImage.height * this.scale / 2 + 10, barWidth * healthPercentage, barHeight);\n\n        ctx.restore(); // Restore the canvas state\n    }\n\n    /**\n     * Apply damage to the meteorite.\n     * @param damage - The amount of damage to apply to the meteorite.\n     */\n    public applyDamage(damage: number): void {\n        this.health -= damage;\n\n        // Ensure health doesn't go negative\n        if (this.health <= 0) {\n            this.isDestroyed = true;\n            this.health = 0;\n        }\n    }\n\n    /**\n     * Update the state of the meteorite object\n     */\n    public update(): void {\n        // Make sure the meteorite is not destroyed\n        if (this.isDestroyed) {\n            this.updateExplosion();\n            return;\n        }\n\n        // Move meteorite\n        this.position.x += this.velocity.x * this.speed;\n        this.position.y += this.velocity.y * this.speed;\n\n        // Animate flame\n        this.updateSprite();\n\n        // Draw meteorite + flame\n        this.drawMeteorite();\n\n        // Draw health bar above the meteorite\n        this.drawHealthBar();\n\n        // Update the rotation to face the target\n        this.calculateRotation();\n    }\n\n    /**\n     * Updates the flame's sprite\n     */\n    private updateSprite(): void {\n        this.flameFrameCounter++;\n        if (this.flameFrameCounter >= this.flameFrameDelay) {\n            this.flameFrameCounter = 0;\n            this.flameFrameIndex = (this.flameFrameIndex + 1) % this.flameSpriteFrames.length;\n        }\n    }\n\n    /**\n     * Update the explosion animation by advancing the frame.\n     * This method handles incrementing the frame counter and switching to the next explosion frame when it's time.\n     */\n    private updateExplosion(): void {\n        // Increment the frame counter\n        this.explosionFrameCounter++;\n\n        // Check if it's time to switch to the next frame\n        if (this.explosionFrameCounter >= this.explosionFrameDelay) {\n            this.explosionFrameCounter = 0; // Reset the frame counter\n            this.explosionFrameIndex++; // Move to the next explosion frame\n\n            // If the last frame is reached, stay on it (end of animation)\n            if (this.explosionFrameIndex >= this.explosionSpriteFrames.length) {\n                this.explosionFrameIndex = this.explosionSpriteFrames.length - 1; // Stay on last frame\n\n                setTimeout((): boolean => this.readyToBeRemoved = true, this.delayBeforeRemoving);\n            }\n        }\n\n        // Draw the current explosion frame\n        this.drawExplosion();\n    }\n\n    // Method to play the explosion sound\n    private playExplosionSound(): void {\n        this.explosionSound.play().catch((error: any): void => {\n            console.error('Failed to play explosion sound:', error);\n        });\n    }\n\n    // Returns meteorite's position\n    public getPosition(): { x: number; y: number } {\n        return { ...this.position };\n    }\n\n    // Returns the radius of the meteorite based on its sprite width and scale.\n    public getRadius(): number {\n        // Get the width of the meteorite sprite (it may not be loaded yet, so we handle it carefully)\n        const width: number = this.meteoriteSpriteImage.width * this.scale;\n\n        // If the sprite is not yet loaded, we fallback to a default value for now (you can adjust it)\n        if (width === 0) {\n            console.warn(\"Meteorite sprite not yet loaded. Using fallback radius.\");\n            return 20 * this.scale;  // Default radius if sprite width is not available\n        }\n\n        // Calculate and return the radius using the width of the sprite\n        return width / 2;  // The radius is half the width of the sprite\n    }\n\n    // Returns whether the object can be removed after the explosion animation\n    public getReadyToBeRemoved(): boolean {\n        return this.readyToBeRemoved\n    }\n\n    // Returns the isDestroyed attribute\n    public getIsDestroyed(): boolean {\n        return this.isDestroyed;\n    }\n}\n\nexport default Meteorite;\n"]}