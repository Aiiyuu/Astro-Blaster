{"version":3,"sources":["loop/collisionDetection.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAOH,OAAO,kCAAkC,MAAM,yCAAyC,CAAC;AACzF,OAAO,iCAAiC,MAAM,wCAAwC,CAAC;AACvF,OAAO,8BAA8B,MAAM,qCAAqC,CAAC;AAGjF;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,CAAC,OAAO,UAAU,eAAe,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,EAK9E;IAEG,0DAA0D;IAC1D,kCAAkC,CAAC;QAC/B,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,WAAW;QACxB,UAAU,EAAE,UAAU;KACzB,CAAC,CAAC;IAEH,0CAA0C;IAC1C,iCAAiC,CAAC;QAC9B,IAAI,EAAE,IAAI;QACV,UAAU,EAAE,UAAU;KACzB,CAAC,CAAC;IAEH,iEAAiE;IACjE,8BAA8B,CAAC;QAC3B,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,MAAM;QACd,UAAU,EAAE,UAAU;KACzB,CAAC,CAAA;AACN,CAAC","file":"collisionDetection.js","sourcesContent":["/**\n * collisionDetection.ts\n *\n * Handles collision detection between game entities such as projectiles and meteorites.\n * Implements logic for determining if objects intersect based on their positions and sizes.\n * Used to trigger events like projectile destruction or meteorite damage.\n */\n\nimport Game from '../entities/game.js';\nimport Projectile from '../entities/projectile.js';\nimport Meteorite from '../entities/meteorite.js';\nimport Player from '../entities/player.js';\nimport projectile from \"../entities/projectile.js\";\nimport detectProjectileMeteoriteCollision from './detectProjectileMeteoriteCollision.js';\nimport detectMeteoriteMeteoriteCollision from './detectMeteoriteMeteoriteCollision.js';\nimport detectPlayerMeteoriteCollision from './detectPlayerMeteoriteCollision.js';\n\n\n/**\n * detectCollision.ts\n *\n * Handles collision detection between various game entities, including projectiles, meteorites, and the player.\n * It checks for overlaps between projectiles and meteorites, as well as meteorite-to-meteorite collisions,\n * and triggers appropriate responses (e.g., destruction or damage).\n * The function delegates specific collision checks to helper functions for clarity and modularity.\n *\n * @param {Object} params - The parameters for collision detection.\n * @param {Game} params.game - The current game instance, used for managing game state.\n * @param {Projectile[]} params.projectiles - Array of all projectiles in the game.\n * @param {Meteorite[]} params.meteorites - Array of all meteorites in the game.\n * @param {Player} params.player - The player object, used for detecting player-related collisions.\n *\n * @returns {void} This function does not return anything, it performs actions on the passed objects by calling\n * helper functions to detect and resolve collisions.\n */\nexport default function detectCollision({ game, meteorites, projectiles, player }: {\n    game: Game;\n    projectiles: Projectile[];\n    meteorites: Meteorite[];\n    player: Player;\n}): void {\n\n    // Check for collisions between projectiles and meteorites\n    detectProjectileMeteoriteCollision({\n        game: game,\n        player: player,\n        projectiles: projectiles,\n        meteorites: meteorites,\n    });\n\n    // Check for collisions between meteorites\n    detectMeteoriteMeteoriteCollision({\n        game: game,\n        meteorites: meteorites,\n    });\n\n    // Check for any collisions between the player and the meteorites\n    detectPlayerMeteoriteCollision({\n        game: game,\n        player: player,\n        meteorites: meteorites,\n    })\n}"]}