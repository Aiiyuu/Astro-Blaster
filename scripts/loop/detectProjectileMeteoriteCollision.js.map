{"version":3,"sources":["loop/detectProjectileMeteoriteCollision.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAMH,OAAO,MAAM,MAAM,cAAc,CAAC;AAGlC;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,OAAO,UAAU,kCAAkC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAKjG;IACG,wEAAwE;IACxE,WAAW,CAAC,OAAO,CAAC,CAAC,UAAsB,EAAE,MAAc,EAAQ,EAAE;QACjE,UAAU,CAAC,OAAO,CAAC,CAAC,SAAoB,EAAE,MAAc,EAAQ,EAAE;YAC9D,2CAA2C;YAC3C,IAAI,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC;gBAC7B,OAAO;YACX,CAAC;YAED,oDAAoD;YACpD,MAAM,aAAa,GAA6B,UAAU,CAAC,WAAW,EAAE,CAAC;YACzE,MAAM,YAAY,GAA6B,SAAS,CAAC,WAAW,EAAE,CAAC;YAEvE,6EAA6E;YAC7E,MAAM,EAAE,GAAW,aAAa,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;YACpD,MAAM,EAAE,GAAW,aAAa,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;YACpD,MAAM,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YAEtD,2EAA2E;YAC3E,MAAM,gBAAgB,GAAG,CAAC,CAAC,CAAE,oDAAoD;YACjF,MAAM,eAAe,GAAW,SAAS,CAAC,SAAS,EAAE,CAAC,CAAE,yCAAyC;YAEjG,4EAA4E;YAC5E,IAAI,QAAQ,GAAG,gBAAgB,GAAG,eAAe,EAAE,CAAC;gBAChD,qBAAqB;gBACrB,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAE9B,gCAAgC;gBAChC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,CAAC;gBAEpD,4BAA4B;gBAC5B,IAAI,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC;oBAC7B,uCAAuC;oBACvC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;wBACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBAC5D,CAAC;gBACL,CAAC;gBAED,OAAO;YACX,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC","file":"detectProjectileMeteoriteCollision.js","sourcesContent":["/**\n * detectProjectileMeteoriteCollision.ts\n *\n * Contains logic for detecting collisions between projectiles and meteorites.\n * When a collision is detected, both the projectile and meteorite are removed from the game.\n * The collision is determined by checking if the distance between their centers is less\n * than the sum of their radii.\n */\n\nimport Game from '../entities/game.js';\nimport Player from '../entities/player.js';\nimport Projectile from '../entities/projectile.js';\nimport Meteorite from '../entities/meteorite.js';\nimport config from '../config.js';\n\n\n/**\n * Detects collisions between projectiles and meteorites in the game.\n * It checks for overlaps based on their positions and sizes, and triggers\n * appropriate responses (e.g., destruction or damage).\n *\n * @param {Game} params.game - The current game instance, used for managing game state.\n * @param {Player} params.player - The player instance, used for getting its projectile damage.\n * @param {Projectile[]} params.projectiles - Array of all projectiles in the game.\n * @param {Meteorite[]} params.meteorites - Array of all meteorites in the game.\n *\n * @returns {void} This function does not return anything, it performs actions on the passed objects.\n */\nexport default function detectProjectileMeteoriteCollision({ game, player, projectiles, meteorites }: {\n    game: Game;\n    player: Player;\n    projectiles: Projectile[];\n    meteorites: Meteorite[];\n}): void {\n    // Loop through each projectile and check for collisions with meteorites\n    projectiles.forEach((projectile: Projectile, pIndex: number): void => {\n        meteorites.forEach((meteorite: Meteorite, mIndex: number): void => {\n            // Make sure the meteorite is not destroyed\n            if (meteorite.getIsDestroyed()) {\n                return;\n            }\n\n            // Get the positions of the projectile and meteorite\n            const projectilePos: { x: number, y: number } = projectile.getPosition();\n            const meteoritePos: { x: number, y: number } = meteorite.getPosition();\n\n            // Calculate the distance between the centers of the projectile and meteorite\n            const dx: number = projectilePos.x - meteoritePos.x;\n            const dy: number = projectilePos.y - meteoritePos.y;\n            const distance: number = Math.sqrt(dx * dx + dy * dy);\n\n            // Assuming the radius is proportional to their scale (or use fixed values)\n            const projectileRadius = 5;  // You can adjust this based on your projectile size\n            const meteoriteRadius: number = meteorite.getRadius();  // Get the actual radius of the meteorite\n\n            // Check if the distance is less than the sum of the radii (i.e., collision)\n            if (distance < projectileRadius + meteoriteRadius) {\n                // Destroy projectile\n                projectiles.splice(pIndex, 1);\n\n                // Apply damage to the meteorite\n                meteorite.applyDamage(player.getProjectileDamage());\n\n                // Update the player's score\n                if (meteorite.getIsDestroyed()) {\n                    // Make sure the player is not defeated\n                    if (!game.getIsDefeated()) {\n                        game.setScore(game.getScore() + config.meteorite.score);\n                    }\n                }\n\n                return;\n            }\n        });\n    });\n}"]}