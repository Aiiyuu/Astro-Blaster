{"version":3,"sources":["loop/detectMeteoriteMeteoriteCollision.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,MAAM,MAAM,cAAc,CAAC;AAKlC;;;;;;;;;;GAUG;AACH,MAAM,CAAC,OAAO,UAAU,iCAAiC,CAAC,EAAE,IAAI,EAAE,UAAU,EAG3E;IACG,gEAAgE;IAChE,UAAU,CAAC,OAAO,CAAC,CAAC,UAAqB,EAAE,MAAc,EAAQ,EAAE;QAC/D,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,UAAqB,EAAE,MAAc,EAAQ,EAAE;YACjF,uCAAuC;YACvC,MAAM,IAAI,GAA6B,UAAU,CAAC,WAAW,EAAE,CAAC;YAChE,MAAM,IAAI,GAA6B,UAAU,CAAC,WAAW,EAAE,CAAC;YAEhE,gEAAgE;YAChE,MAAM,EAAE,GAAW,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;YACnC,MAAM,EAAE,GAAW,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YAEtD,oCAAoC;YACpC,MAAM,OAAO,GAAW,UAAU,CAAC,SAAS,EAAE,CAAC;YAC/C,MAAM,OAAO,GAAW,UAAU,CAAC,SAAS,EAAE,CAAC;YAE/C,4EAA4E;YAC5E,IAAI,QAAQ,GAAG,OAAO,GAAG,OAAO,EAAE,CAAC;gBAC/B,iCAAiC;gBACjC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;gBACvD,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC","file":"detectMeteoriteMeteoriteCollision.js","sourcesContent":["/**\n * detectMeteoriteMeteoriteCollision.ts\n *\n * Detects collisions between meteorites in the game.\n * When two meteorites collide, both are removed from the game.\n * Collision is determined by comparing the distance between their centers\n * to the sum of their radii.\n */\n\nimport config from '../config.js';\nimport Game from '../entities/game.js';\nimport Projectile from '../entities/projectile.js';\nimport Meteorite from '../entities/meteorite.js';\n\n/**\n * Detects collisions between meteorites in the game.\n * It checks for overlaps between meteorites based on their positions and sizes,\n * and triggers appropriate responses\n *\n * @param {Game} params.game - The current game instance, used for managing game state.\n * @param {Meteorite[]} params.meteorites - Array of all meteorites in the game.\n *\n * @returns {void} This function does not return anything. It mutates the passed meteorites array\n * by removing any meteorites that collide with each other.\n */\nexport default function detectMeteoriteMeteoriteCollision({ game, meteorites }: {\n    game: Game;\n    meteorites: Meteorite[];\n}): void {\n    // Detect collisions between meteorites (meteorite-to-meteorite)\n    meteorites.forEach((meteoriteA: Meteorite, indexA: number): void => {\n        meteorites.slice(indexA + 1).forEach((meteoriteB: Meteorite, indexB: number): void => {\n            // Get the positions of both meteorites\n            const posA: { x: number, y: number } = meteoriteA.getPosition();\n            const posB: { x: number, y: number } = meteoriteB.getPosition();\n\n            // Calculate the distance between the centers of both meteorites\n            const dx: number = posA.x - posB.x;\n            const dy: number = posA.y - posB.y;\n            const distance: number = Math.sqrt(dx * dx + dy * dy);\n\n            // Get the radius of both meteorites\n            const radiusA: number = meteoriteA.getRadius();\n            const radiusB: number = meteoriteB.getRadius();\n\n            // Check if the distance is less than the sum of the radii (i.e., collision)\n            if (distance < radiusA + radiusB) {\n                // Apply damage to the meteorites\n                meteoriteA.applyDamage(config.meteorite.health_points);\n                meteoriteB.applyDamage(config.meteorite.health_points);\n            }\n        });\n    });\n}\n"]}