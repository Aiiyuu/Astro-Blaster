{"version":3,"sources":["loop/detectPlayerMeteoriteCollision.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAKH,OAAO,MAAM,MAAM,cAAc,CAAC;AAGlC;;;;;;;;;;GAUG;AACH,MAAM,CAAC,OAAO,UAAU,8BAA8B,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAIhF;IACG,wEAAwE;IACxE,UAAU,CAAC,OAAO,CAAC,CAAC,SAAoB,EAAE,MAAc,EAAQ,EAAE;QAC9D,0EAA0E;QAC1E,IAAI,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;YACtD,OAAO;QACX,CAAC;QAED,gDAAgD;QAChD,MAAM,SAAS,GAA6B,MAAM,CAAC,WAAW,EAAE,CAAC;QACjE,MAAM,YAAY,GAA6B,SAAS,CAAC,WAAW,EAAE,CAAC;QAEvE,6EAA6E;QAC7E,MAAM,EAAE,GAAW,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;QAChD,MAAM,EAAE,GAAW,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAEtD,yFAAyF;QACzF,MAAM,YAAY,GAAW,MAAM,CAAC,SAAS,EAAE,CAAC,CAAE,sCAAsC;QACxF,MAAM,eAAe,GAAW,SAAS,CAAC,SAAS,EAAE,CAAC,CAAE,yCAAyC;QAEjG,4EAA4E;QAC5E,IAAI,QAAQ,GAAG,YAAY,GAAG,eAAe,EAAE,CAAC;YAC5C,uDAAuD;YACvD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAE1C,6DAA6D;YAC7D,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAE/C,4BAA4B;YAC5B,IAAI,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC;gBAC7B,uCAAuC;gBACvC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;oBACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC5D,CAAC;YACL,CAAC;YAED,sCAAsC;YACtC,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;gBACvB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,wBAAwB;YACtD,CAAC;YAED,OAAO;QACX,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC","file":"detectPlayerMeteoriteCollision.js","sourcesContent":["/**\n * detectPlayerMeteoriteCollision.ts\n *\n * Contains logic for detecting collisions between the player and meteorites.\n * When a collision is detected, the player’s health is affected and the meteorite\n * is removed from the game. The collision is determined by checking if the distance\n * between the player’s position and the meteorite’s center is less than the sum of their radii.\n */\n\nimport Game from '../entities/game.js';\nimport Player from '../entities/player.js';\nimport Meteorite from '../entities/meteorite.js';\nimport config from '../config.js';\n\n\n/**\n * Detects collisions between the player and meteorites in the game.\n * It checks for overlaps based on their positions and sizes, and triggers\n * appropriate responses (e.g., health damage, meteorite destruction).\n *\n * @param {Game} params.game - The current game instance, used for managing game state.\n * @param {Player} params.player - The player instance, used for checking the player's health and position.\n * @param {Meteorite[]} params.meteorites - Array of all meteorites in the game.\n *\n * @returns {void} This function does not return anything, it performs actions on the passed objects.\n */\nexport default function detectPlayerMeteoriteCollision({ game, player, meteorites }: {\n    game: Game;\n    player: Player;\n    meteorites: Meteorite[];\n}): void {\n    // Loop through each meteorite and check for a collision with the player\n    meteorites.forEach((meteorite: Meteorite, mIndex: number): void => {\n        // Make sure the meteorite is not destroyed and the player is not defeated\n        if (meteorite.getIsDestroyed() && !game.getIsDefeated()) {\n            return;\n        }\n\n        // Get the positions of the player and meteorite\n        const playerPos: { x: number, y: number } = player.getPosition();\n        const meteoritePos: { x: number, y: number } = meteorite.getPosition();\n\n        // Calculate the distance between the centers of the player and the meteorite\n        const dx: number = playerPos.x - meteoritePos.x;\n        const dy: number = playerPos.y - meteoritePos.y;\n        const distance: number = Math.sqrt(dx * dx + dy * dy);\n\n        // Assuming the radius of the player is proportional to their scale (or use fixed values)\n        const playerRadius: number = player.getRadius();  // Get the actual radius of the player\n        const meteoriteRadius: number = meteorite.getRadius();  // Get the actual radius of the meteorite\n\n        // Check if the distance is less than the sum of the radii (i.e., collision)\n        if (distance < playerRadius + meteoriteRadius) {\n            // Apply damage to the player (adjust damage as needed)\n            game.applyDamage(config.meteorite.damage);\n\n            // Destroy the meteorite (or trigger any destruction effects)\n            meteorite.applyDamage(config.player.ramDamage);\n\n            // Update the player's score\n            if (meteorite.getIsDestroyed()) {\n                // Make sure the player is not defeated\n                if (!game.getIsDefeated()) {\n                    game.setScore(game.getScore() + config.meteorite.score);\n                }\n            }\n\n            // Check if the player is not defeated\n            if (game.getIsDefeated()) {\n                player.setIsDefeated(true);\n                player.stopFlyingSound(); // Stop the flying sound\n            }\n\n            return;\n        }\n    });\n}\n"]}