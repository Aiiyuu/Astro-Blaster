{"version":3,"sources":["loop/handleShooting.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,UAAU,MAAM,2BAA2B,CAAC;AAGnD,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEpD,IAAI,YAAY,GAAW,CAAC,CAAC;AAE7B,wEAAwE;AACxE,MAAM,YAAY,GAAW,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;AAEnE;;;;;;;;GAQG;AACH,SAAS,sBAAsB,CAC3B,MAAc,EACd,cAAsB,EACtB,cAAwC,EACxC,GAA6B,EAC7B,WAAyB;IAEzB,WAAW,CAAC,IAAI,CACZ,IAAI,UAAU,CAAC;QACX,GAAG;QACH,QAAQ,EAAE;YACN,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;YAC1D,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;SAC5D;QACD,QAAQ,EAAE;YACN,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK;YAC5D,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK;SAC/D;KACJ,CAAC,CACL,CAAC;AACN,CAAC;AAGD;;;;;;;GAOG;AACH,MAAM,CAAC,OAAO,UAAU,cAAc,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,EAIhE;IACG,MAAM,GAAG,GAAW,WAAW,CAAC,GAAG,EAAE,CAAC;IAEtC,gFAAgF;IAChF,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,YAAY,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QACrF,YAAY,GAAG,GAAG,CAAC;QAEnB,2CAA2C;QAC3C,MAAM,cAAc,qBAAQ,MAAM,CAAC,WAAW,EAAE,CAAE,CAAC;QACnD,MAAM,cAAc,GAAW,MAAM,CAAC,WAAW,EAAE,CAAC;QAEpD,sBAAsB,CAAC,YAAY,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;QACvF,sBAAsB,CAAC,YAAY,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;IAChG,CAAC;AACL,CAAC","file":"handleShooting.js","sourcesContent":["/**\n * handleShooting.ts\n *\n * Creates and adds a new projectile to the game when the Space key is clicked.\n * Enforces reload time between shots.\n */\n\nimport config from '../config.js';\nimport Projectile from '../entities/projectile.js';\nimport Player from '../entities/player.js';\nimport Game from '../entities/game.js';\nimport { isKeyPressed } from '../input/keyboard.js';\n\nlet lastShotTime: number = 0;\n\n// Create and add a new projectile in the direction the player is facing\nconst spreadMargin: number = config.player.projectile.spreadMargin;\n\n/**\n * Creates and adds a new projectile to the projectiles array at a given angle.\n *\n * @param margin - The margin at which the projectile is fired.\n * @param playerRotation - The current rotation of the player.\n * @param playerPosition - The current position of the player.\n * @param ctx - The canvas rendering context.\n * @param projectiles - The array to which the new projectile will be added.\n */\nfunction shootProjectileAtAngle(\n    margin: number,\n    playerRotation: number,\n    playerPosition: { x: number; y: number },\n    ctx: CanvasRenderingContext2D,\n    projectiles: Projectile[]\n): void {\n    projectiles.push(\n        new Projectile({\n            ctx,\n            position: {\n                x: playerPosition.x + (-Math.sin(playerRotation) * margin),\n                y: playerPosition.y + (Math.cos(playerRotation) * margin)\n            },\n            velocity: {\n                x: Math.cos(playerRotation) * config.player.projectile.speed,\n                y: Math.sin(playerRotation) * config.player.projectile.speed\n            },\n        })\n    );\n}\n\n\n/**\n * Handles player shooting input. Shoots two projectiles simultaneously\n * with a slight angle offset when the Space key is clicked, respecting reload time.\n *\n * @param player - The player entity.\n * @param projectiles - The current list of projectiles in the game.\n * @param ctx - The canvas rendering context.\n */\nexport default function handleShooting({ player, projectiles, ctx }: {\n    player: Player;\n    projectiles: Projectile[];\n    ctx: CanvasRenderingContext2D;\n}): void {\n    const now: number = performance.now();\n\n    // Only fire if Space was clicked and enough time has passed since the last shot\n    if (isKeyPressed('Space') && now - lastShotTime >= config.player.projectile.reloadTime) {\n        lastShotTime = now;\n\n        // Get current player position and rotation\n        const playerPosition = { ...player.getPosition() };\n        const playerRotation: number = player.getRotation();\n\n        shootProjectileAtAngle(spreadMargin, playerRotation, playerPosition, ctx, projectiles);\n        shootProjectileAtAngle(spreadMargin * -1, playerRotation, playerPosition, ctx, projectiles);\n    }\n}\n"]}