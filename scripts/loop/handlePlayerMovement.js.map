{"version":3,"sources":["loop/handlePlayerMovement.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAGpD,MAAM,CAAC,OAAO,UAAU,oBAAoB,CAAC,MAAc;IACvD,6BAA6B;IAC7B,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACvB,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;QAC7E,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IACjF,CAAC;SAAM,CAAC;QACJ,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,iCAAiC;IACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;IAC3C,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;IAE3C,iBAAiB;IACjB,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC5C,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IAE5C,qBAAqB;IACrB,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvE,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,KAAK,GAAW,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC;IAC/B,CAAC;AACL,CAAC","file":"handlePlayerMovement.js","sourcesContent":["/**\n * handlePlayerMovement.ts\n *\n * Updates the player's movement based on keyboard input,\n * including acceleration, friction, and velocity clamping.\n */\n\nimport config from '../config.js';\nimport { isKeyPressed } from '../input/keyboard.js';\nimport Player from '../entities/player.js'\n\nexport default function handlePlayerMovement(player: Player): void {\n    // Apply forward acceleration\n    if (isKeyPressed('KeyW')) {\n        player.acceleration.x = Math.cos(player.getRotation()) * config.player.speed;\n        player.acceleration.y = Math.sin(player.getRotation()) * config.player.speed;\n    } else {\n        player.acceleration.x = 0;\n        player.acceleration.y = 0;\n    }\n\n    // Apply acceleration to velocity\n    player.velocity.x += player.acceleration.x;\n    player.velocity.y += player.acceleration.y;\n\n    // Apply friction\n    player.velocity.x *= config.player.friction;\n    player.velocity.y *= config.player.friction;\n\n    // Clamp to max speed\n    const speed: number = Math.hypot(player.velocity.x, player.velocity.y);\n    if (speed > config.player.maxSpeed) {\n        const scale: number = config.player.maxSpeed / speed;\n        player.velocity.x *= scale;\n        player.velocity.y *= scale;\n    }\n}\n"]}