{"version":3,"sources":["loop/gameLoop.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,oBAAoB,MAAM,2BAA2B,CAAC;AAC7D,OAAO,cAAc,MAAM,qBAAqB,CAAC;AACjD,OAAO,cAAc,MAAM,qBAAqB,CAAC;AACjD,OAAO,iBAAiB,MAAM,wBAAwB,CAAC;AACvD,OAAO,gBAAgB,MAAM,uBAAuB,CAAC;AACrD,OAAO,eAAe,MAAM,yBAAyB,CAAC;AAOtD,MAAM,UAAU,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,EAMpE;IACG,SAAS,IAAI;QACT,qDAAqD;QACrD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE7B,4EAA4E;QAC5E,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAE/B,0DAA0D;QAC1D,IAAG,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;YAC/B,MAAM,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC;QAED,oCAAoC;QACpC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAE7B,wBAAwB;QACxB,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,iCAAiC;QACjC,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,+CAA+C;QAC/C,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;YAChC,4CAA4C;YAC5C,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAE7B,4DAA4D;YAC5D,cAAc,CAAC,MAAM,CAAC,CAAC;YAEvB,qDAAqD;YACrD,cAAc,CAAC;gBACX,MAAM,EAAE,MAAM;gBACd,WAAW,EAAE,WAAW;gBACxB,GAAG,EAAE,GAAG;aAAE,CACb,CAAC;QACN,CAAC;aAAM,CAAC;YACJ,0BAA0B;YAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QAED,0EAA0E;QAC1E,eAAe,CAAC;YACZ,IAAI,EAAE,IAAI;YACV,WAAW,EAAE,WAAW;YACxB,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;QAEH,0DAA0D;QAC1D,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,iBAAiB;IACjB,IAAI,EAAE,CAAC;AACX,CAAC","file":"gameLoop.js","sourcesContent":["/**\n * gameLoop.ts\n *\n * Main animation loop that updates game state every frame.\n * Delegates tasks to specialized handlers.\n */\n\nimport handlePlayerMovement from './handlePlayerMovement.js';\nimport handleRotation from './handleRotation.js';\nimport handleShooting from './handleShooting.js';\nimport updateProjectiles from './updateProjectiles.js';\nimport updateMeteorites from \"./updateMeteorites.js\";\nimport detectCollision from \"./collisionDetection.js\";\nimport Game from '../entities/game.js';\nimport Player from '../entities/player.js';\nimport Projectile from '../entities/projectile.js';\nimport Meteorite from '../entities/meteorite.js';\n\n\nexport function gameLoop({ game, player, projectiles, meteorites, ctx } : {\n    game: Game;\n    player: Player;\n    projectiles: Projectile[];\n    meteorites: Meteorite[];\n    ctx: CanvasRenderingContext2D;\n}): void {\n    function loop(): void {\n        // Update overall game state based on player movement\n        game.update(player.velocity);\n\n        // Update all active projectiles (e.g. move them forward, remove off-screen)\n        updateProjectiles(projectiles);\n\n        // Update player-specific state (e.g. position, cooldowns)\n        if(!player.getReadyToBeRemoved()) {\n            player.update();\n        }\n\n        // Update all meteorites' statements\n        updateMeteorites(meteorites);\n\n        // Update the score text\n        game.drawScore();\n\n        // Update the player's health bar\n        game.drawHealthBar();\n\n        // Make sure the player sprite ins not defeated\n        if (!player.getReadyToBeRemoved()) {\n            // Handle keyboard input for player movement\n            handlePlayerMovement(player);\n\n            // Adjust player's rotation based on mouse position or input\n            handleRotation(player);\n\n            // Handle firing logic, including drawing projectiles\n            handleShooting({\n                player: player,\n                projectiles: projectiles,\n                ctx: ctx }\n            );\n        } else {\n            // Draw the game over text\n            game.drawGameOver();\n        }\n\n        // Detect and handle collisions between projectiles, player and meteorites\n        detectCollision({\n            game: game,\n            projectiles: projectiles,\n            meteorites: meteorites,\n            player: player\n        });\n\n        // Request the next animation frame to keep the loop going\n        requestAnimationFrame(loop);\n    }\n\n    // Start the loop\n    loop();\n}\n"]}