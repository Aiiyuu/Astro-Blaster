{"version":3,"sources":["../../src/website/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * This function wraps the content of a button with a div that has a class 'botontext'.\n * It then appends the wrapper back into the button and clones it.\n *\n * @param button - The button element to wrap content in.\n */\nfunction wrapButtonContent(button: HTMLElement): void {\n    // Create wrapper div\n    const wrapper: HTMLDivElement = document.createElement('div');\n    wrapper.className = 'botontext';\n\n    // Move all child nodes into wrapper\n    while (button.firstChild) {\n        wrapper.appendChild(button.firstChild);\n    }\n\n    // Append wrapper to button\n    button.appendChild(wrapper);\n\n    // Clone the wrapper and append to button\n    const clone: Node = wrapper.cloneNode(true);\n    button.appendChild(clone);\n}\n\n/**\n * This function appends four <span> elements with the class 'twist' to the button.\n *\n * @param button - The button element to append twist elements to.\n */\nfunction appendTwistElements(button: HTMLElement): void {\n    for (let i: number = 0; i < 4; i++) {\n        const span: HTMLSpanElement = document.createElement('span');\n        span.className = 'twist';\n        button.appendChild(span);\n    }\n}\n\n/**\n * This function sets the width of all span.twist elements inside a button to 'calc(25% + 3px)'.\n *\n * @param button - The button element containing twist elements.\n */\nfunction setTwistWidths(button: HTMLElement): void {\n    const twists: NodeListOf<HTMLElement> = button.querySelectorAll<HTMLElement>('span.twist');\n    twists.forEach((twist: HTMLElement): void => {\n        twist.style.width = 'calc(25% + 3px)';\n    });\n}\n\n/**\n * This function sets up the click event listener for the play button.\n *\n * @param playButton - The play button element.\n * @param ribbonsContainer - The ribbons container element.\n */\nfunction setupPlayButtonEventListener(playButton: HTMLElement, ribbonsContainer: HTMLElement): void {\n    // Calculate the delay for ribbon removal based on the number of 'span' elements.\n    const RIBBON_REMOVAL_DELAY: number = RIBBON_DELAY * (Array.from(ribbonsContainer.querySelectorAll('span')).length + 2);\n\n    // Add a 'click' event listener to the play button\n    playButton.addEventListener('click', (): void => {\n        // Start the ribbon animation (roll-in)\n        ribbonsContainer.classList.add('ribbons-roll-in');\n\n\n        // Play the swoosh sound\n        setTimeout(async (): Promise<void> => {\n            if (SWOOSH_SOUND) {\n                await SWOOSH_SOUND.play();\n            }\n        }, 300)\n\n        // After the delay, stop the roll-in and start the roll-out animation\n        setTimeout((): void => {\n            ribbonsContainer.classList.remove('ribbons-roll-in');\n            ribbonsContainer.classList.add('ribbons-roll-out');\n\n            // Show the game window\n            if (GAME_WINDOW) {\n                GAME_WINDOW.classList.add('show');\n            }\n        }, RIBBON_REMOVAL_DELAY); // Delay based on number of ribbons\n    });\n}\n\n/**\n * This is the main function that wraps the above functions to manipulate the button.\n *\n * @param selector - The selector to find the button(s).\n */\nfunction setupGameButton(selector: string = '#start-game'): void {\n    const buttons: NodeListOf<HTMLElement> = document.querySelectorAll<HTMLElement>(selector);\n\n    buttons.forEach((button: HTMLElement): void => {\n        wrapButtonContent(button);        // Wrap content in .botontext and clone\n        appendTwistElements(button);      // Append four twist elements\n        setTwistWidths(button);           // Set the width of twist elements\n\n        if (PLAY_BUTTON && RIBBONS_CONTAINER) {\n            setupPlayButtonEventListener(PLAY_BUTTON, RIBBONS_CONTAINER); // Call the dedicated function\n        }\n    });\n}\n\n\n/**\n * Sets a dynamic animation delay for each span inside an element with class \"ribbons\".\n * The delay is calculated based on the index of each span, starting from 0ms and increasing by 300ms for each subsequent span.\n *\n * @param selector - The CSS selector for the container that holds the span elements (default is '.ribbons').\n * @param delayIncrement - The increment for the animation delay (default is 300ms).\n */\nfunction setAnimationDelays(delayIncrement: number = 300): void {\n    if (!RIBBONS_CONTAINER) return;\n\n    // Select all the span elements inside the container specified by the selector\n    const spans: NodeListOf<HTMLElement> = RIBBONS_CONTAINER.querySelectorAll(`span`);\n\n    // Loop through each span and set its animation delay\n    spans.forEach((span: HTMLElement, index: number): void => {\n        // Set the animation delay for the current span based on its index\n        span.style.animationDelay = `${delayIncrement * index}ms`;\n    });\n}\n\n/**\n * This function displays a full-page loading overlay (\".loading-wrapper\") while the website loads,\n * and automatically hides it once the window 'load' event is fired (all assets like images are fully loaded).\n *\n * It expects a <div class=\"loading-wrapper\"> to exist in the HTML and be styled to cover the screen.\n */\nfunction showLoadingUntilSiteLoaded(): void {\n    window.addEventListener('load', (): void => {\n        const LOADER = document.querySelector('.loading-wrapper') as HTMLElement | null;\n        if (LOADER) {\n            LOADER.style.display = 'none';\n        }\n    });\n}\n\n\nconst PLAY_BUTTON: HTMLButtonElement | null = document.querySelector('#start-game');\nconst RIBBONS_CONTAINER: HTMLDivElement | null = document.querySelector('.ribbons');\nconst RIBBON_DELAY: number = 300;\nconst GAME_WINDOW: HTMLDivElement | null = document.querySelector('#game');\nconst SWOOSH_SOUND = document.querySelector('#swoosh-sound') as HTMLAudioElement | null;\n\nwindow.addEventListener('DOMContentLoaded', (): void => {\n    showLoadingUntilSiteLoaded(); // Display loader while site loads\n\n    setupGameButton(); // Use the default selector #start-game\n    setAnimationDelays(RIBBON_DELAY); // Set delays for spans inside the \".ribbons\" container\n});\n"]}